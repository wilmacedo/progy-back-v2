generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model ActivityNotification {
  id      Int     @id @default(autoincrement())
  delayed Boolean @default(false)
  expired Boolean @default(false)

  activity_id Int      @unique
  activity    Activity @relation(fields: [activity_id], references: [id])

  @@map("activitiy_notifications")
}

model Notification {
  id       Int     @id @default(autoincrement())
  user_id  Int     @unique
  users    User    @relation(fields: [user_id], references: [id])
  activity Boolean @default(true)

  @@map("notifications")
}

model Activity {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  initiative_id        Int
  responsible          String                 @db.VarChar(255)
  date_start           DateTime               @db.Timestamptz(6)
  date_end             DateTime               @db.Timestamptz(6)
  value                Decimal?               @db.Decimal
  state_id             Int
  planning_id          Int
  created_at           DateTime               @db.Timestamptz(6)
  updated_at           DateTime               @db.Timestamptz(6)
  file                 Bytes?
  comments             String?                @db.VarChar(255)
  initiatives          Initiative             @relation(fields: [initiative_id], references: [id], onDelete: Cascade)
  plannings            Planning               @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  states               State                  @relation(fields: [state_id], references: [id], onDelete: Cascade)
  pending_activities   PendingActivity[]
  ActivityNotification ActivityNotification[]

  @@map("activities")
}

model Font {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  code                String              @db.VarChar(255)
  date                DateTime?           @db.Timestamptz(6)
  value               Int
  other_value         Int?
  planning_id         Int
  created_at          DateTime            @db.Timestamptz(6)
  updated_at          DateTime            @db.Timestamptz(6)
  plannings           Planning            @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  pending_initiatives PendingInitiative[]
  Initiative          Initiative[]

  @@map("fonts")
}

model Goal {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  planning_id         Int
  created_at          DateTime            @db.Timestamptz(6)
  updated_at          DateTime            @db.Timestamptz(6)
  plannings           Planning            @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  initiatives         Initiative[]
  pending_initiatives PendingInitiative[]

  @@map("goals")
}

model Initiative {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  unit_id             Int
  perspective_id      Int
  stage_id            Int
  font_id             Int
  goal_id             Int
  responsible         String              @db.VarChar(255)
  code                String              @db.VarChar(255)
  planning_id         Int
  created_at          DateTime            @db.Timestamptz(6)
  updated_at          DateTime            @db.Timestamptz(6)
  file                Bytes?
  comments            String?             @db.VarChar(255)
  budget_code         String?             @db.VarChar(255)
  mapp_id             Int?
  activities          Activity[]
  goals               Goal                @relation(fields: [goal_id], references: [id], onDelete: Cascade)
  mapps               Mapp?               @relation(fields: [mapp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  perspectives        Perspective         @relation(fields: [perspective_id], references: [id], onDelete: Cascade)
  plannings           Planning            @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  stages              Stage               @relation(fields: [stage_id], references: [id], onDelete: Cascade)
  units               Unit                @relation(fields: [unit_id], references: [id], onDelete: Cascade)
  fonts               Font                @relation(fields: [font_id], references: [id])
  pending_activities  PendingActivity[]
  pending_initiatives PendingInitiative[]

  @@map("initiatives")
}

model Institution {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  code       String     @unique @db.VarChar(255)
  active     Boolean    @default(true)
  created_at DateTime   @db.Timestamptz(6)
  updated_at DateTime   @db.Timestamptz(6)
  plannings  Planning[]

  @@map("institutions")
}

model Mapp {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  planning_id Int
  created_at  DateTime     @db.Timestamptz(6)
  updated_at  DateTime     @db.Timestamptz(6)
  initiatives Initiative[]
  plannings   Planning     @relation(fields: [planning_id], references: [id], onDelete: Cascade)

  @@map("mapps")
}

model PendingActivity {
  id            Int        @id @default(autoincrement())
  activity_id   Int?
  name          String     @db.VarChar(255)
  initiative_id Int
  responsible   String     @db.VarChar(255)
  date_start    DateTime   @db.Timestamptz(6)
  date_end      DateTime   @db.Timestamptz(6)
  value         Int?
  file          Bytes?
  comments      String?    @db.VarChar(255)
  state_id      Int
  planning_id   Int
  created_at    DateTime   @db.Timestamptz(6)
  updated_at    DateTime   @db.Timestamptz(6)
  activities    Activity?  @relation(fields: [activity_id], references: [id], onDelete: Cascade)
  initiatives   Initiative @relation(fields: [initiative_id], references: [id], onDelete: Cascade)
  plannings     Planning   @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  states        State      @relation(fields: [state_id], references: [id], onDelete: Cascade)

  @@map("pending_activities")
}

model PendingInitiative {
  id             Int         @id @default(autoincrement())
  initiative_id  Int?
  name           String      @db.VarChar(255)
  unit_id        Int
  perspective_id Int
  stage_id       Int
  font_id        Int
  goal_id        Int
  responsible    String      @db.VarChar(255)
  code           String      @db.VarChar(255)
  planning_id    Int
  file           Bytes?
  comments       String?     @db.VarChar(255)
  created_at     DateTime    @db.Timestamptz(6)
  updated_at     DateTime    @db.Timestamptz(6)
  fonts          Font        @relation(fields: [font_id], references: [id], onDelete: Cascade)
  goals          Goal        @relation(fields: [goal_id], references: [id], onDelete: Cascade)
  initiatives    Initiative? @relation(fields: [initiative_id], references: [id], onDelete: Cascade)
  perspectives   Perspective @relation(fields: [perspective_id], references: [id], onDelete: Cascade)
  plannings      Planning    @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  stages         Stage       @relation(fields: [stage_id], references: [id], onDelete: Cascade)
  units          Unit        @relation(fields: [unit_id], references: [id], onDelete: Cascade)

  @@map("pending_initiatives")
}

model Perspective {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  planning_id         Int
  created_at          DateTime            @db.Timestamptz(6)
  updated_at          DateTime            @db.Timestamptz(6)
  initiatives         Initiative[]
  pending_initiatives PendingInitiative[]
  plannings           Planning            @relation(fields: [planning_id], references: [id], onDelete: Cascade)

  @@map("perspectives")
}

model Planning {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  sector              String?             @db.VarChar(255)
  institution_id      Int
  created_at          DateTime            @db.Timestamptz(6)
  updated_at          DateTime            @db.Timestamptz(6)
  activities          Activity[]
  fonts               Font[]
  goals               Goal[]
  initiatives         Initiative[]
  mapps               Mapp[]
  pending_activities  PendingActivity[]
  pending_initiatives PendingInitiative[]
  perspectives        Perspective[]
  institutions        Institution         @relation(fields: [institution_id], references: [id], onDelete: Cascade)
  stages              Stage[]
  states              State[]
  units               Unit[]

  @@map("plannings")
}

model Stage {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  planning_id         Int
  created_at          DateTime            @db.Timestamptz(6)
  updated_at          DateTime            @db.Timestamptz(6)
  initiatives         Initiative[]
  pending_initiatives PendingInitiative[]
  plannings           Planning            @relation(fields: [planning_id], references: [id], onDelete: Cascade)

  @@map("stages")
}

model State {
  id                 Int               @id @default(autoincrement())
  name               String            @db.VarChar(255)
  planning_id        Int
  created_at         DateTime          @db.Timestamptz(6)
  updated_at         DateTime          @db.Timestamptz(6)
  activities         Activity[]
  pending_activities PendingActivity[]
  plannings          Planning          @relation(fields: [planning_id], references: [id], onDelete: Cascade)

  @@map("states")
}

model Unit {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  code                String              @db.VarChar(255)
  planning_id         Int
  created_at          DateTime            @db.Timestamptz(6)
  updated_at          DateTime            @db.Timestamptz(6)
  initiatives         Initiative[]
  pending_initiatives PendingInitiative[]
  plannings           Planning            @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  users               User[]

  @@map("units")
}

model User {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar(255)
  email          String         @unique @db.VarChar(255)
  password       String         @db.VarChar(255)
  role           String         @db.VarChar(255)
  institution_id Int?
  created_at     DateTime       @db.Timestamptz(6)
  updated_at     DateTime       @db.Timestamptz(6)
  unit_id        Int?
  units          Unit?          @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Notification   Notification[]

  @@map("users")
}
