generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model activities {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  initiative_id      Int
  responsible        String               @db.VarChar(255)
  date_start         DateTime             @db.Timestamptz(6)
  date_end           DateTime             @db.Timestamptz(6)
  value              Decimal?             @db.Decimal
  state_id           Int
  planning_id        Int
  created_at         DateTime             @db.Timestamptz(6)
  updated_at         DateTime             @db.Timestamptz(6)
  file               Bytes?
  comments           String?              @db.VarChar(255)
  initiatives        initiatives          @relation(fields: [initiative_id], references: [id], onDelete: Cascade)
  plannings          plannings            @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  states             states               @relation(fields: [state_id], references: [id], onDelete: Cascade)
  pending_activities pending_activities[]
}

model fonts {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  code                String                @db.VarChar(255)
  date                DateTime?             @db.Timestamptz(6)
  value               Int
  other_value         Int?
  planning_id         Int
  created_at          DateTime              @db.Timestamptz(6)
  updated_at          DateTime              @db.Timestamptz(6)
  plannings           plannings             @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  pending_initiatives pending_initiatives[]
}

model goals {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  planning_id         Int
  created_at          DateTime              @db.Timestamptz(6)
  updated_at          DateTime              @db.Timestamptz(6)
  plannings           plannings             @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  initiatives         initiatives[]
  pending_initiatives pending_initiatives[]
}

model initiatives {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  unit_id             Int
  perspective_id      Int
  stage_id            Int
  font_id             Int
  goal_id             Int
  responsible         String                @db.VarChar(255)
  code                String                @db.VarChar(255)
  planning_id         Int
  created_at          DateTime              @db.Timestamptz(6)
  updated_at          DateTime              @db.Timestamptz(6)
  file                Bytes?
  comments            String?               @db.VarChar(255)
  budget_code         String?               @db.VarChar(255)
  mapp_id             Int?
  activities          activities[]
  goals               goals                 @relation(fields: [goal_id], references: [id], onDelete: Cascade)
  mapps               mapps?                @relation(fields: [mapp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  perspectives        perspectives          @relation(fields: [perspective_id], references: [id], onDelete: Cascade)
  plannings           plannings             @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  stages              stages                @relation(fields: [stage_id], references: [id], onDelete: Cascade)
  units               units                 @relation(fields: [unit_id], references: [id], onDelete: Cascade)
  pending_activities  pending_activities[]
  pending_initiatives pending_initiatives[]
}

model institutions {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  code       String      @unique @db.VarChar(255)
  created_at DateTime    @db.Timestamptz(6)
  updated_at DateTime    @db.Timestamptz(6)
  plannings  plannings[]
}

model mapps {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  planning_id Int
  created_at  DateTime      @db.Timestamptz(6)
  updated_at  DateTime      @db.Timestamptz(6)
  initiatives initiatives[]
  plannings   plannings     @relation(fields: [planning_id], references: [id], onDelete: Cascade)
}

model pending_activities {
  id            Int         @id @default(autoincrement())
  activity_id   Int?
  name          String      @db.VarChar(255)
  initiative_id Int
  responsible   String      @db.VarChar(255)
  date_start    DateTime    @db.Timestamptz(6)
  date_end      DateTime    @db.Timestamptz(6)
  value         Int?
  file          Bytes?
  comments      String?     @db.VarChar(255)
  state_id      Int
  planning_id   Int
  created_at    DateTime    @db.Timestamptz(6)
  updated_at    DateTime    @db.Timestamptz(6)
  activities    activities? @relation(fields: [activity_id], references: [id], onDelete: Cascade)
  initiatives   initiatives @relation(fields: [initiative_id], references: [id], onDelete: Cascade)
  plannings     plannings   @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  states        states      @relation(fields: [state_id], references: [id], onDelete: Cascade)
}

model pending_initiatives {
  id             Int          @id @default(autoincrement())
  initiative_id  Int?
  name           String       @db.VarChar(255)
  unit_id        Int
  perspective_id Int
  stage_id       Int
  font_id        Int
  goal_id        Int
  responsible    String       @db.VarChar(255)
  code           String       @db.VarChar(255)
  planning_id    Int
  file           Bytes?
  comments       String?      @db.VarChar(255)
  created_at     DateTime     @db.Timestamptz(6)
  updated_at     DateTime     @db.Timestamptz(6)
  fonts          fonts        @relation(fields: [font_id], references: [id], onDelete: Cascade)
  goals          goals        @relation(fields: [goal_id], references: [id], onDelete: Cascade)
  initiatives    initiatives? @relation(fields: [initiative_id], references: [id], onDelete: Cascade)
  perspectives   perspectives @relation(fields: [perspective_id], references: [id], onDelete: Cascade)
  plannings      plannings    @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  stages         stages       @relation(fields: [stage_id], references: [id], onDelete: Cascade)
  units          units        @relation(fields: [unit_id], references: [id], onDelete: Cascade)
}

model perspectives {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  planning_id         Int
  created_at          DateTime              @db.Timestamptz(6)
  updated_at          DateTime              @db.Timestamptz(6)
  initiatives         initiatives[]
  pending_initiatives pending_initiatives[]
  plannings           plannings             @relation(fields: [planning_id], references: [id], onDelete: Cascade)
}

model plannings {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  sector              String?               @db.VarChar(255)
  institution_id      Int
  created_at          DateTime              @db.Timestamptz(6)
  updated_at          DateTime              @db.Timestamptz(6)
  activities          activities[]
  fonts               fonts[]
  goals               goals[]
  initiatives         initiatives[]
  mapps               mapps[]
  pending_activities  pending_activities[]
  pending_initiatives pending_initiatives[]
  perspectives        perspectives[]
  institutions        institutions          @relation(fields: [institution_id], references: [id], onDelete: Cascade)
  stages              stages[]
  states              states[]
  units               units[]
}

model stages {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  planning_id         Int
  created_at          DateTime              @db.Timestamptz(6)
  updated_at          DateTime              @db.Timestamptz(6)
  initiatives         initiatives[]
  pending_initiatives pending_initiatives[]
  plannings           plannings             @relation(fields: [planning_id], references: [id], onDelete: Cascade)
}

model states {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  planning_id        Int
  created_at         DateTime             @db.Timestamptz(6)
  updated_at         DateTime             @db.Timestamptz(6)
  activities         activities[]
  pending_activities pending_activities[]
  plannings          plannings            @relation(fields: [planning_id], references: [id], onDelete: Cascade)
}

model units {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  code                String                @db.VarChar(255)
  planning_id         Int
  created_at          DateTime              @db.Timestamptz(6)
  updated_at          DateTime              @db.Timestamptz(6)
  initiatives         initiatives[]
  pending_initiatives pending_initiatives[]
  plannings           plannings             @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  users               users[]
}

model users {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(255)
  email          String   @unique @db.VarChar(255)
  password       String   @db.VarChar(255)
  role           String   @db.VarChar(255)
  institution_id Int?
  created_at     DateTime @db.Timestamptz(6)
  updated_at     DateTime @db.Timestamptz(6)
  unit_id        Int?
  units          units?   @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
